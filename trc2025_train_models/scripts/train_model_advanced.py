#!/usr/bin/env python3
"""
Script d'Entra√Ænement Avanc√© pour TRC2025
==========================================

Modes disponibles:
    - fine-tune : Continue depuis best.pt (85.2%) - RECOMMAND√â
    - from-scratch : Repart de z√©ro avec yolov5m.pt
    - resume : Reprend un entra√Ænement interrompu

Auteur: TRC2025 Team
Date: 11 octobre 2025
"""

import sys
from pathlib import Path
import subprocess
import yaml
import argparse

class AdvancedModelTrainer:
    def __init__(self, base_dir="."):
        self.base_dir = Path(base_dir)
        self.yolov5_dir = self.base_dir / "models" / "yolov5"
        self.best_model = self.base_dir / "models" / "trained_models" / "garbage_classifier_v1" / "weights" / "best.pt"
        
    def setup_yolov5(self):
        """Installe YOLOv5"""
        if not self.yolov5_dir.exists():
            print("üì• Clonage de YOLOv5...")
            subprocess.run([
                "git", "clone", "https://github.com/ultralytics/yolov5.git",
                str(self.yolov5_dir)
            ], check=True)
            
            print("üì¶ Installation des d√©pendances...")
            subprocess.run([
                "pip", "install", "-r", str(self.yolov5_dir / "requirements.txt")
            ], check=True)
        
        print("‚úÖ YOLOv5 pr√™t")
    
    def load_config(self):
        """Charge la configuration d'entra√Ænement"""
        config_path = self.base_dir / "config" / "training_config.yaml"
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)['training']
    
    def train(self, mode='fine-tune', epochs=None, name_suffix=''):
        """
        Lance l'entra√Ænement
        
        Args:
            mode: 'fine-tune', 'from-scratch', ou 'resume'
            epochs: Nombre d'epochs (None = utiliser config)
            name_suffix: Suffixe pour le nom du mod√®le
        """
        config = self.load_config()
        dataset_path = self.base_dir / "data" / "dataset.yaml"
        
        if not dataset_path.exists():
            print("‚ùå dataset.yaml non trouv√©")
            return
        
        # D√©terminer les poids de d√©part
        if mode == 'fine-tune':
            if not self.best_model.exists():
                print(f"‚ùå Mod√®le best.pt introuvable: {self.best_model}")
                print("   Utilisez mode 'from-scratch' pour commencer de z√©ro")
                return
            weights = str(self.best_model)
            training_type = "FINE-TUNING (suite de l'entra√Ænement)"
        elif mode == 'from-scratch':
            weights = f"{config['model']}.pt"
            training_type = "FROM SCRATCH (depuis z√©ro)"
        elif mode == 'resume':
            last_checkpoint = self.base_dir / "models" / "trained_models" / config['name'] / "weights" / "last.pt"
            if not last_checkpoint.exists():
                print(f"‚ùå Checkpoint last.pt introuvable: {last_checkpoint}")
                return
            weights = str(last_checkpoint)
            training_type = "RESUME (reprise d'un entra√Ænement interrompu)"
        else:
            print(f"‚ùå Mode invalide: {mode}")
            return
        
        # Nombre d'epochs
        num_epochs = epochs if epochs else config['epochs']
        
        # Nom du mod√®le
        if name_suffix:
            model_name = f"{config['name']}_{name_suffix}"
        else:
            if mode == 'fine-tune':
                model_name = f"{config['name']}_finetuned"
            elif mode == 'from-scratch':
                model_name = f"{config['name']}_fromscratch"
            else:
                model_name = config['name']
        
        print("=" * 70)
        print("üöÄ ENTRA√éNEMENT DU MOD√àLE TRC2025")
        print("=" * 70)
        print(f"Mode: {training_type}")
        print(f"Poids de d√©part: {Path(weights).name}")
        print(f"Epochs: {num_epochs}")
        print(f"Batch size: {config['batch_size']}")
        print(f"Image size: {config['img_size']}")
        print(f"Nom du mod√®le: {model_name}")
        print(f"Dataset: {dataset_path}")
        print("=" * 70)
        print()
        
        # Ajouter yolov5 au sys.path pour l'importer
        sys.path.insert(0, str(self.yolov5_dir))
        
        # Chemin vers le fichier hyperparam√®tres
        hyp_path = self.base_dir / "config" / "hyp.yaml"
        
        cmd = [
            sys.executable, 
            str(self.yolov5_dir / "train.py"),
            "--img", str(config['img_size']),
            "--batch", str(config['batch_size']),
            "--epochs", str(num_epochs),
            "--data", str(dataset_path),
            "--weights", weights,
            "--project", str(self.base_dir / "models" / "trained_models"),
            "--name", model_name,
            "--exist-ok",
            "--patience", str(config['patience'])
        ]
        
        # Ajouter le fichier hyperparam√®tres si disponible
        if hyp_path.exists():
            cmd.extend(["--hyp", str(hyp_path)])
            print(f"üìù Utilisation des hyperparam√®tres: {hyp_path}")
        
        print("üèÉ Lancement de l'entra√Ænement...")
        print()
        
        try:
            subprocess.run(cmd, check=True)
            print()
            print("=" * 70)
            print("‚úÖ ENTRA√éNEMENT TERMIN√â!")
            print("=" * 70)
            print()
            print("üìä Prochaine √©tape: Tester le nouveau mod√®le")
            print(f"   python scripts/test_on_competition_dataset.py")
            print()
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur pendant l'entra√Ænement: {e}")
        except KeyboardInterrupt:
            print()
            print("‚èπÔ∏è  Entra√Ænement interrompu par l'utilisateur")
            print(f"   Pour reprendre: python scripts/train_model_advanced.py --mode resume")

def main():
    parser = argparse.ArgumentParser(description='Entra√Ænement avanc√© du mod√®le TRC2025')
    parser.add_argument('--mode', type=str, default='fine-tune',
                       choices=['fine-tune', 'from-scratch', 'resume'],
                       help='Mode d\'entra√Ænement (d√©faut: fine-tune)')
    parser.add_argument('--epochs', type=int, default=None,
                       help='Nombre d\'epochs (d√©faut: valeur du config)')
    parser.add_argument('--name-suffix', type=str, default='',
                       help='Suffixe pour le nom du mod√®le')
    
    args = parser.parse_args()
    
    # Afficher les recommandations
    print()
    if args.mode == 'fine-tune':
        print("‚úÖ MODE RECOMMAND√â: Fine-tuning")
        print("   Part de votre mod√®le actuel (85.2%) et l'am√©liore")
        print("   Temps estim√©: 2-3h pour 50 epochs")
        print("   Gain attendu: 85.2% ‚Üí 90-93%")
    elif args.mode == 'from-scratch':
        print("‚ö†Ô∏è  MODE AVANC√â: From Scratch")
        print("   Repart de z√©ro avec yolov5m pr√©-entra√Æn√©")
        print("   Temps estim√©: 6-8h pour 100 epochs")
        print("   Gain attendu: 80-92% (incertain)")
    elif args.mode == 'resume':
        print("üîÑ MODE REPRISE: Resume")
        print("   Reprend un entra√Ænement interrompu")
    print()
    
    # Cr√©er le trainer
    trainer = AdvancedModelTrainer()
    trainer.setup_yolov5()
    trainer.train(mode=args.mode, epochs=args.epochs, name_suffix=args.name_suffix)

if __name__ == "__main__":
    main()

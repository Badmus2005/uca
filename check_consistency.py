#!/usr/bin/env python3
"""
Script de v√©rification de coh√©rence pour DOFbot TRC2025
V√©rifie la compatibilit√© entre tous les composants
"""
import os
import json
import yaml
from pathlib import Path

def check_models_folder():
    """V√©rifie le dossier models"""
    print("üîç V√©rification du dossier models...")

    models_dir = Path(__file__).parent / "models"
    issues = []

    # V√©rifier les fichiers requis
    required_files = ['best.pt', 'class_names.json', 'dataset.yaml']
    for file in required_files:
        if not (models_dir / file).exists():
            issues.append(f"‚ùå Fichier manquant: {file}")

    # V√©rifier class_names.json
    if (models_dir / 'class_names.json').exists():
        try:
            with open(models_dir / 'class_names.json', 'r') as f:
                data = json.load(f)

            # V√©rifier la structure
            if 'categories' not in data:
                issues.append("‚ùå class_names.json: cl√© 'categories' manquante")
            if 'class_ids' not in data:
                issues.append("‚ùå class_names.json: cl√© 'class_ids' manquante")

            # V√©rifier coh√©rence des classes
            categories = data.get('categories', {})
            class_ids = data.get('class_ids', {})

            if len(categories) != len(class_ids):
                issues.append("‚ùå Incoh√©rence nombre de classes entre categories et class_ids")

        except json.JSONDecodeError:
            issues.append("‚ùå class_names.json: JSON invalide")

    # V√©rifier dataset.yaml
    if (models_dir / 'dataset.yaml').exists():
        try:
            with open(models_dir / 'dataset.yaml', 'r') as f:
                data = yaml.safe_load(f)

            # V√©rifier qu'il n'y a pas de chemin Windows
            path = data.get('path', '')
            if 'D:\\' in path or 'C:\\' in path:
                issues.append(f"‚ùå dataset.yaml: chemin Windows d√©tect√©: {path}")

            # V√©rifier nc et names
            nc = data.get('nc', 0)
            names = data.get('names', [])
            if nc != len(names):
                issues.append(f"‚ùå dataset.yaml: nc ({nc}) != len(names) ({len(names)})")

        except yaml.YAMLError:
            issues.append("‚ùå dataset.yaml: YAML invalide")

    return issues

def check_ros_package():
    """V√©rifie le package ROS"""
    print("üîç V√©rification du package ROS...")

    ros_dir = Path(__file__).parent / "ros_package"
    issues = []

    # V√©rifier les scripts Python
    scripts_dir = ros_dir / "scripts"
    if scripts_dir.exists():
        scripts = list(scripts_dir.glob("*.py"))
        for script in scripts:
            try:
                with open(script, 'r') as f:
                    first_line = f.readline().strip()

                # V√©rifier shebang Python 3
                if not first_line.startswith('#!/usr/bin/env python3'):
                    issues.append(f"‚ùå {script.name}: shebang Python 2 d√©tect√©")

            except Exception as e:
                issues.append(f"‚ùå Erreur lecture {script.name}: {e}")

    # V√©rifier service Classify.srv
    srv_file = ros_dir / "srv" / "Classify.srv"
    if srv_file.exists():
        try:
            with open(srv_file, 'r') as f:
                content = f.read()

            # V√©rifier que class_id est int32, pas string
            if 'string class_id' in content:
                issues.append("‚ùå Classify.srv: class_id devrait √™tre int32, pas string")

        except Exception as e:
            issues.append(f"‚ùå Erreur lecture Classify.srv: {e}")

    # V√©rifier CMakeLists.txt
    cmake_file = ros_dir / "CMakeLists.txt"
    if cmake_file.exists():
        try:
            with open(cmake_file, 'r') as f:
                content = f.read()

            # V√©rifier que les scripts r√©f√©renc√©s existent
            scripts_dir = ros_dir / "scripts"
            for line in content.split('\n'):
                if line.strip().startswith('scripts/'):
                    script_name = line.strip().replace('scripts/', '').replace(')', '')
                    script_path = scripts_dir / script_name
                    if not script_path.exists():
                        issues.append(f"‚ùå CMakeLists.txt r√©f√©rence script inexistant: {script_name}")

        except Exception as e:
            issues.append(f"‚ùå Erreur lecture CMakeLists.txt: {e}")

    return issues

def check_dependencies():
    """V√©rifie les d√©pendances Python"""
    print("üîç V√©rification des d√©pendances...")

    issues = []

    # D√©pendances critiques pour Jetson
    critical_deps = ['torch', 'cv2', 'numpy', 'rospy']

    for dep in critical_deps:
        try:
            if dep == 'cv2':
                import cv2
            else:
                __import__(dep)
        except ImportError:
            issues.append(f"‚ùå D√©pendance manquante: {dep}")

    # V√©rifier version PyTorch (devrait √™tre 1.6.0 sur Jetson)
    try:
        import torch
        version = torch.__version__
        print(f"‚úÖ PyTorch version: {version}")

        # Avertissement si pas 1.6.0 (version JetPack)
        if '1.6.0' not in version:
            issues.append(f"‚ö†Ô∏è Version PyTorch {version} - Attendu 1.6.0 pour JetPack")

    except ImportError:
        issues.append("‚ùå PyTorch non install√©")

    return issues

def main():
    """Fonction principale"""
    print("="*70)
    print("üîç V√âRIFICATION DE COH√âRENCE - DOFbot TRC2025")
    print("="*70)

    all_issues = []

    # V√©rifications
    all_issues.extend(check_models_folder())
    all_issues.extend(check_ros_package())
    all_issues.extend(check_dependencies())

    # R√©sultats
    print("\n" + "="*70)
    print("üìä R√âSULTATS:")

    if not all_issues:
        print("‚úÖ Aucune erreur d√©tect√©e!")
        print("üéâ Le projet est pr√™t pour le d√©ploiement sur Jetson Nano.")
    else:
        print(f"‚ùå {len(all_issues)} probl√®me(s) d√©tect√©(s):")
        for issue in all_issues:
            print(f"   {issue}")

    print("="*70)

    # Recommandations
    if all_issues:
        print("\nüí° RECOMMANDATIONS:")
        print("1. Corrigez les erreurs ci-dessus")
        print("2. Testez avec: python3 test_setup_jetson.py")
        print("3. Sur Jetson: ./install_dependencies_jetson.sh")
        print("4. Lancez: python3 vision_node.py --test")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Test du n≈ìud vision ROS avec YOLOv5
V√©rifie l'int√©gration YOLOv5 + ROS
"""

import sys
import os
from pathlib import Path
import unittest
import yaml
import cv2
import numpy as np

PROJECT_ROOT = Path(__file__).parent.parent


class TestVisionNodeConfiguration(unittest.TestCase):
    """Tests de la configuration du n≈ìud vision"""
    
    @classmethod
    def setUpClass(cls):
        """Initialisation"""
        print("\n" + "="*60)
        print("üß™ TESTS DU N≈íUD VISION")
        print("="*60 + "\n")
    
    def test_01_vision_node_exists(self):
        """Test 1: V√©rifier que vision_node.py existe"""
        print("üìù Test 1: Existence de vision_node.py...")
        
        vision_node = PROJECT_ROOT / "ros_package" / "scripts" / "vision_node.py"
        self.assertTrue(
            vision_node.exists(),
            f"‚ùå vision_node.py introuvable: {vision_node}"
        )
        print(f"   ‚úÖ Fichier trouv√©: {vision_node}")
    
    def test_02_yolov5_params_exists(self):
        """Test 2: V√©rifier que yolov5_params.yaml existe"""
        print("üìù Test 2: Existence de yolov5_params.yaml...")
        
        params_file = PROJECT_ROOT / "config" / "yolov5_params.yaml"
        self.assertTrue(
            params_file.exists(),
            f"‚ùå yolov5_params.yaml introuvable: {params_file}"
        )
        print(f"   ‚úÖ Fichier trouv√©: {params_file}")
    
    def test_03_load_yolov5_params(self):
        """Test 3: Charger les param√®tres YOLOv5"""
        print("üìù Test 3: Chargement des param√®tres YOLOv5...")
        
        params_file = PROJECT_ROOT / "config" / "yolov5_params.yaml"
        with open(params_file, 'r', encoding='utf-8') as f:
            params = yaml.safe_load(f)
        
        # V√©rifier les param√®tres requis (structure imbriqu√©e)
        self.assertIn('model', params, "‚ùå section model manquante")
        self.assertIn('inference', params, "‚ùå section inference manquante")
        
        model = params['model']
        inference = params['inference']
        
        self.assertIn('weights_path', model, "‚ùå weights_path manquant")
        self.assertIn('conf_threshold', inference, "‚ùå conf_threshold manquant")
        self.assertIn('iou_threshold', inference, "‚ùå iou_threshold manquant")
        self.assertIn('img_size', inference, "‚ùå img_size manquant")
        self.assertIn('device', inference, "‚ùå device manquant")
        
        # V√©rifier les valeurs
        self.assertGreater(inference['conf_threshold'], 0, "‚ùå conf_threshold doit √™tre > 0")
        self.assertLess(inference['conf_threshold'], 1, "‚ùå conf_threshold doit √™tre < 1")
        self.assertIn(inference['img_size'], [320, 416, 640], "‚ùå img_size invalide")
        
        print(f"   ‚úÖ Conf threshold: {inference['conf_threshold']}")
        print(f"   ‚úÖ Image size: {inference['img_size']}")
        print(f"   ‚úÖ Device: {inference['device']}")
    
    def test_04_camera_params_exists(self):
        """Test 4: V√©rifier camera_params.yaml"""
        print("üìù Test 4: Existence de camera_params.yaml...")
        
        camera_file = PROJECT_ROOT / "config" / "camera_params.yaml"
        self.assertTrue(
            camera_file.exists(),
            f"‚ùå camera_params.yaml introuvable: {camera_file}"
        )
        
        with open(camera_file, 'r', encoding='utf-8') as f:
            params = yaml.safe_load(f)
        
        # Structure imbriqu√©e
        self.assertIn('camera', params, "‚ùå section camera manquante")
        camera = params['camera']
        
        self.assertIn('resolution', camera, "‚ùå resolution manquante")
        self.assertIn('framerate', camera, "‚ùå framerate manquante")
        
        res = camera['resolution']
        fps = camera['framerate']['fps']
        
        print(f"   ‚úÖ R√©solution: {res['width']}√ó{res['height']} @ {fps}fps")
    
    def test_05_vision_node_syntax(self):
        """Test 5: V√©rifier la syntaxe de vision_node.py"""
        print("üìù Test 5: V√©rification syntaxe Python...")
        
        vision_node = PROJECT_ROOT / "ros_package" / "scripts" / "vision_node.py"
        
        with open(vision_node, 'r', encoding='utf-8') as f:
            code = f.read()
        
        try:
            compile(code, vision_node, 'exec')
            print("   ‚úÖ Syntaxe Python correcte")
        except SyntaxError as e:
            self.fail(f"‚ùå Erreur syntaxe: {e}")
    
    def test_06_yolov5_imports_present(self):
        """Test 6: V√©rifier les imports YOLOv5 dans vision_node.py"""
        print("üìù Test 6: V√©rification imports YOLOv5...")
        
        vision_node = PROJECT_ROOT / "ros_package" / "scripts" / "vision_node.py"
        
        with open(vision_node, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # V√©rifier imports YOLOv5 critiques
        required_imports = [
            'from yolov5.utils.torch_utils import select_device',
            'from yolov5.models.experimental import attempt_load',
            'from yolov5.utils.general import non_max_suppression'
        ]
        
        for imp in required_imports:
            self.assertIn(imp, code, f"‚ùå Import manquant: {imp}")
        
        print("   ‚úÖ Imports YOLOv5 pr√©sents")
    
    def test_07_yolov5_classification_method(self):
        """Test 7: V√©rifier m√©thode yolov5_classification"""
        print("üìù Test 7: V√©rification m√©thode yolov5_classification...")
        
        vision_node = PROJECT_ROOT / "ros_package" / "scripts" / "vision_node.py"
        
        with open(vision_node, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # V√©rifier que la m√©thode existe
        self.assertIn('def yolov5_classification', code, "‚ùå M√©thode yolov5_classification manquante")
        
        # V√©rifier appels cl√©s
        self.assertIn('cv2.resize', code, "‚ùå Redimensionnement image manquant")
        self.assertIn('torch.from_numpy', code, "‚ùå Conversion tensor manquante")
        self.assertIn('non_max_suppression', code, "‚ùå NMS manquant")
        
        print("   ‚úÖ M√©thode yolov5_classification correcte")


class TestVisionNodeFunctionality(unittest.TestCase):
    """Tests fonctionnels du n≈ìud vision (sans ROS)"""
    
    def test_01_create_test_image(self):
        """Test 1: Cr√©er image de test"""
        print("\nüìù Test Fonctionnel 1: Cr√©ation image test...")
        
        # Cr√©er image RGB 640√ó480
        test_img = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        self.assertEqual(test_img.shape, (480, 640, 3), "‚ùå Mauvaise dimension")
        self.assertEqual(test_img.dtype, np.uint8, "‚ùå Mauvais type")
        
        print(f"   ‚úÖ Image test cr√©√©e: {test_img.shape}")
    
    def test_02_image_preprocessing(self):
        """Test 2: Tester pr√©traitement image"""
        print("üìù Test Fonctionnel 2: Pr√©traitement image...")
        
        # Image test
        img = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # Redimensionner √† 640√ó640 (comme YOLOv5)
        img_resized = cv2.resize(img, (640, 640))
        
        self.assertEqual(img_resized.shape, (640, 640, 3), "‚ùå Redimensionnement √©chou√©")
        
        # Normaliser [0, 1]
        img_normalized = img_resized.astype(np.float32) / 255.0
        
        self.assertGreaterEqual(img_normalized.min(), 0.0, "‚ùå Min < 0")
        self.assertLessEqual(img_normalized.max(), 1.0, "‚ùå Max > 1")
        
        print(f"   ‚úÖ Pr√©traitement OK: {img_resized.shape} normalis√© [0,1]")
    
    def test_03_class_names_defined(self):
        """Test 3: V√©rifier les noms de classes"""
        print("üìù Test Fonctionnel 3: Noms des classes...")
        
        vision_node = PROJECT_ROOT / "ros_package" / "scripts" / "vision_node.py"
        
        with open(vision_node, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # V√©rifier les 3 classes
        expected_classes = ['dangereux', 'menagers', 'recyclables']
        
        for class_name in expected_classes:
            self.assertIn(class_name, code, f"‚ùå Classe '{class_name}' manquante")
        
        print(f"   ‚úÖ Classes d√©finies: {', '.join(expected_classes)}")
    
    def test_04_service_definition(self):
        """Test 4: V√©rifier d√©finition du service ROS"""
        print("üìù Test Fonctionnel 4: Service ROS Classify...")
        
        srv_file = PROJECT_ROOT / "ros_package" / "srv" / "Classify.srv"
        
        if srv_file.exists():
            with open(srv_file, 'r') as f:
                srv_content = f.read()
            
            # V√©rifier structure request/response
            self.assertIn('---', srv_content, "‚ùå S√©parateur --- manquant")
            
            print(f"   ‚úÖ Service Classify.srv d√©fini")
        else:
            print(f"   ‚ö†Ô∏è  Classify.srv non trouv√© (optionnel)")


class TestVisionIntegration(unittest.TestCase):
    """Tests d'int√©gration YOLOv5 + Vision"""
    
    def test_01_model_file_accessible(self):
        """Test 1: Mod√®le YOLOv5 accessible"""
        print("\nüìù Test Int√©gration 1: Acc√®s au mod√®le...")
        
        model_file = PROJECT_ROOT / "models" / "best.pt"
        self.assertTrue(
            model_file.exists(),
            f"‚ùå Mod√®le introuvable: {model_file}"
        )
        
        size_mb = model_file.stat().st_size / (1024 * 1024)
        print(f"   ‚úÖ Mod√®le trouv√©: {model_file.name} ({size_mb:.1f} MB)")
    
    def test_02_yolov5_framework_present(self):
        """Test 2: Framework YOLOv5 pr√©sent"""
        print("üìù Test Int√©gration 2: Framework YOLOv5...")
        
        yolov5_dir = PROJECT_ROOT / "models" / "yolov5"
        self.assertTrue(
            yolov5_dir.exists(),
            f"‚ùå Dossier yolov5 introuvable: {yolov5_dir}"
        )
        
        # V√©rifier fichiers cl√©s (dans sous-dossiers models/ et utils/)
        models_dir = yolov5_dir / "models"
        utils_dir = yolov5_dir / "utils"
        
        required_model_files = ['common.py', 'yolo.py', 'experimental.py']
        required_util_files = ['general.py', 'torch_utils.py']
        
        for filename in required_model_files:
            file_path = models_dir / filename
            self.assertTrue(
                file_path.exists(),
                f"‚ùå Fichier YOLOv5 manquant: models/{filename}"
            )
        
        for filename in required_util_files:
            file_path = utils_dir / filename
            self.assertTrue(
                file_path.exists(),
                f"‚ùå Fichier YOLOv5 manquant: utils/{filename}"
            )
        
        print(f"   ‚úÖ Framework YOLOv5 complet dans {yolov5_dir}")
    
    def test_03_dataset_yaml_exists(self):
        """Test 3: Fichier dataset.yaml existe"""
        print("üìù Test Int√©gration 3: Fichier dataset.yaml...")
        
        dataset_file = PROJECT_ROOT / "models" / "dataset.yaml"
        if dataset_file.exists():
            with open(dataset_file, 'r') as f:
                dataset = yaml.safe_load(f)
            
            self.assertIn('nc', dataset, "‚ùå nc (nombre classes) manquant")
            self.assertIn('names', dataset, "‚ùå names manquant")
            
            self.assertEqual(dataset['nc'], 3, "‚ùå nc devrait √™tre 3")
            self.assertEqual(len(dataset['names']), 3, "‚ùå 3 classes attendues")
            
            print(f"   ‚úÖ Dataset: {dataset['nc']} classes - {dataset['names']}")
        else:
            print(f"   ‚ö†Ô∏è  dataset.yaml non trouv√© (optionnel)")


def run_tests():
    """Lancer tous les tests"""
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    suite.addTests(loader.loadTestsFromTestCase(TestVisionNodeConfiguration))
    suite.addTests(loader.loadTestsFromTestCase(TestVisionNodeFunctionality))
    suite.addTests(loader.loadTestsFromTestCase(TestVisionIntegration))
    
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS VISION")
    print("="*60)
    print(f"‚úÖ Tests r√©ussis: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Tests √©chou√©s: {len(result.failures)}")
    print(f"‚ö†Ô∏è  Erreurs: {len(result.errors)}")
    print("="*60 + "\n")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
Test des mouvements du bras DOFbot
V√©rifie les s√©quences de mouvement et les positions calibr√©es
"""

import sys
import os
from pathlib import Path
import unittest
import yaml

PROJECT_ROOT = Path(__file__).parent.parent


class TestDofbotPositions(unittest.TestCase):
    """Tests des positions calibr√©es du bras"""
    
    @classmethod
    def setUpClass(cls):
        """Initialisation"""
        print("\n" + "="*60)
        print("üß™ TESTS DES POSITIONS DOFBOT")
        print("="*60 + "\n")
        
        cls.config_path = PROJECT_ROOT / "config" / "positions.yaml"
        cls.positions = None
    
    def test_01_config_file_exists(self):
        """Test 1: V√©rifier que le fichier de config existe"""
        print("üìù Test 1: Existence du fichier positions.yaml...")
        self.assertTrue(
            self.config_path.exists(),
            f"‚ùå Config introuvable: {self.config_path}"
        )
        print(f"   ‚úÖ Config trouv√©: {self.config_path}")
    
    def test_02_load_positions(self):
        """Test 2: Charger les positions depuis YAML"""
        print("üìù Test 2: Chargement des positions...")
        
        with open(self.config_path, 'r', encoding='utf-8') as f:
            TestDofbotPositions.positions = yaml.safe_load(f)
        
        self.assertIsNotNone(TestDofbotPositions.positions, "‚ùå Positions None")
        print("   ‚úÖ Positions charg√©es")
    
    def test_03_home_position(self):
        """Test 3: V√©rifier position home"""
        print("üìù Test 3: Position home...")
        
        home = TestDofbotPositions.positions.get('home_position')
        self.assertIsNotNone(home, "‚ùå Position home manquante")
        
        # V√©rifier les joints requis
        required_joints = ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'gripper']
        for joint in required_joints:
            self.assertIn(joint, home, f"‚ùå Joint {joint} manquant dans home")
            self.assertIsInstance(home[joint], int, f"‚ùå {joint} n'est pas un entier")
        
        print(f"   ‚úÖ Position home: {home}")
    
    def test_04_observation_position(self):
        """Test 4: V√©rifier position observation"""
        print("üìù Test 4: Position observation...")
        
        obs = TestDofbotPositions.positions.get('observation_position')
        self.assertIsNotNone(obs, "‚ùå Position observation manquante")
        
        required_joints = ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'gripper']
        for joint in required_joints:
            self.assertIn(joint, obs, f"‚ùå Joint {joint} manquant dans observation")
        
        print(f"   ‚úÖ Position observation: {obs}")
    
    def test_05_bins_positions(self):
        """Test 5: V√©rifier positions des 3 bacs"""
        print("üìù Test 5: Positions des bacs...")
        
        bins = TestDofbotPositions.positions.get('bins')
        self.assertIsNotNone(bins, "‚ùå Positions bacs manquantes")
        
        # V√©rifier les 3 bacs
        required_bins = ['dangereux', 'menagers', 'recyclables']
        for bin_name in required_bins:
            self.assertIn(bin_name, bins, f"‚ùå Bac {bin_name} manquant")
            
            bin_pos = bins[bin_name]
            required_joints = ['joint1', 'joint2', 'joint3', 'joint4', 'joint5']
            
            for joint in required_joints:
                self.assertIn(joint, bin_pos, f"‚ùå Joint {joint} manquant dans {bin_name}")
                self.assertIsInstance(
                    bin_pos[joint], int,
                    f"‚ùå {joint} de {bin_name} n'est pas un entier"
                )
            
            print(f"   ‚úÖ Bac {bin_name}: joint1={bin_pos['joint1']}¬∞")
    
    def test_06_joint_limits(self):
        """Test 6: V√©rifier les limites des joints"""
        print("üìù Test 6: Limites des joints...")
        
        limits = TestDofbotPositions.positions.get('limits')
        self.assertIsNotNone(limits, "‚ùå Limites manquantes")
        
        # V√©rifier toutes les positions respectent les limites
        all_positions = []
        
        # Home
        all_positions.append(('home', TestDofbotPositions.positions['home_position']))
        
        # Observation
        all_positions.append(('observation', TestDofbotPositions.positions['observation_position']))
        
        # Bacs
        for bin_name, bin_pos in TestDofbotPositions.positions['bins'].items():
            all_positions.append((f'bin_{bin_name}', bin_pos))
        
        # V√©rifier chaque position
        for pos_name, position in all_positions:
            for joint in ['joint1', 'joint2', 'joint3', 'joint4', 'joint5']:
                if joint in position:
                    value = position[joint]
                    limit = limits[joint]
                    
                    self.assertGreaterEqual(
                        value, limit[0],
                        f"‚ùå {pos_name}.{joint}={value} < limite min {limit[0]}"
                    )
                    self.assertLessEqual(
                        value, limit[1],
                        f"‚ùå {pos_name}.{joint}={value} > limite max {limit[1]}"
                    )
        
        print("   ‚úÖ Toutes les positions dans les limites")
    
    def test_07_class_to_bin_mapping(self):
        """Test 7: V√©rifier le mapping classe ‚Üí bac"""
        print("üìù Test 7: Mapping classe ‚Üí bac...")
        
        mapping = TestDofbotPositions.positions.get('class_to_bin')
        self.assertIsNotNone(mapping, "‚ùå Mapping manquant")
        
        # V√©rifier les 3 classes
        expected_mapping = {
            0: 'dangereux',
            1: 'menagers',
            2: 'recyclables'
        }
        
        for class_id, expected_bin in expected_mapping.items():
            self.assertIn(class_id, mapping, f"‚ùå Classe {class_id} manquante")
            self.assertEqual(
                mapping[class_id], expected_bin,
                f"‚ùå Classe {class_id} devrait aller vers {expected_bin}"
            )
            print(f"   ‚úÖ Classe {class_id} ‚Üí {mapping[class_id]}")
    
    def test_08_movement_parameters(self):
        """Test 8: V√©rifier les param√®tres de mouvement"""
        print("üìù Test 8: Param√®tres de mouvement...")
        
        movement = TestDofbotPositions.positions.get('movement')
        self.assertIsNotNone(movement, "‚ùå Param√®tres mouvement manquants")
        
        # V√©rifier param√®tres requis
        self.assertIn('speed', movement, "‚ùå Param√®tre 'speed' manquant")
        self.assertIn('gripper_open', movement, "‚ùå Param√®tre 'gripper_open' manquant")
        self.assertIn('gripper_close', movement, "‚ùå Param√®tre 'gripper_close' manquant")
        
        # V√©rifier valeurs
        self.assertGreater(movement['speed'], 0, "‚ùå Speed doit √™tre > 0")
        self.assertLessEqual(movement['speed'], 100, "‚ùå Speed doit √™tre <= 100")
        
        print(f"   ‚úÖ Speed: {movement['speed']}")
        print(f"   ‚úÖ Gripper open: {movement['gripper_open']}")
        print(f"   ‚úÖ Gripper close: {movement['gripper_close']}")


class TestDofbotSequences(unittest.TestCase):
    """Tests des s√©quences de mouvement"""
    
    def test_01_sequence_file_exists(self):
        """Test 1: V√©rifier que le fichier sequences existe"""
        print("\nüìù Test Sequences 1: Existence du fichier...")
        
        sequences_file = PROJECT_ROOT / "ros_package" / "scripts" / "dofbot_tri_system.py"
        self.assertTrue(
            sequences_file.exists(),
            f"‚ùå Fichier sequences introuvable: {sequences_file}"
        )
        print(f"   ‚úÖ Fichier trouv√©: {sequences_file}")
    
    def test_02_sequences_syntax(self):
        """Test 2: V√©rifier la syntaxe du fichier"""
        print("üìù Test Sequences 2: V√©rification syntaxe Python...")
        
        sequences_file = PROJECT_ROOT / "ros_package" / "scripts" / "dofbot_tri_system.py"
        
        # Compiler le fichier Python
        with open(sequences_file, 'r', encoding='utf-8') as f:
            code = f.read()
        
        try:
            compile(code, sequences_file, 'exec')
            print("   ‚úÖ Syntaxe Python correcte")
        except SyntaxError as e:
            self.fail(f"‚ùå Erreur syntaxe: {e}")


def run_tests():
    """Lancer tous les tests"""
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    suite.addTests(loader.loadTestsFromTestCase(TestDofbotPositions))
    suite.addTests(loader.loadTestsFromTestCase(TestDofbotSequences))
    
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS MOUVEMENTS")
    print("="*60)
    print(f"‚úÖ Tests r√©ussis: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Tests √©chou√©s: {len(result.failures)}")
    print(f"‚ö†Ô∏è  Erreurs: {len(result.errors)}")
    print("="*60 + "\n")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
Script de test du mod√®le YOLOv5 pour le syst√®me de tri DOFbot
Permet de tester le mod√®le ind√©pendamment du syst√®me ROS
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le chemin des mod√®les au PYTHONPATH
MODEL_DIR = Path(__file__).parent.parent / "models"
sys.path.insert(0, str(MODEL_DIR))

try:
    import torch
    import cv2
    import yaml
    import numpy as np
    from PIL import Image
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("üîß Installez les d√©pendances: pip3 install torch opencv-python pyyaml pillow")
    sys.exit(1)


class YOLOv5Tester:
    """Classe pour tester le mod√®le YOLOv5"""
    
    def __init__(self, weights_path, config_path):
        """Initialiser le testeur
        
        Args:
            weights_path: Chemin vers best.pt
            config_path: Chemin vers dataset.yaml
        """
        self.weights_path = Path(weights_path)
        self.config_path = Path(config_path)
        self.model = None
        self.classes = None
        
        print("üîß Configuration du testeur YOLOv5...")
        print(f"  üìÅ Mod√®le: {self.weights_path}")
        print(f"  üìÅ Config: {self.config_path}")
        
    def load_model(self):
        """Charger le mod√®le YOLOv5"""
        print("\nüîÑ Chargement du mod√®le...")
        
        if not self.weights_path.exists():
            print(f"‚ùå Fichier mod√®le introuvable: {self.weights_path}")
            return False
        
        try:
            # Charger le mod√®le
            self.model = torch.hub.load(
                'ultralytics/yolov5',
                'custom',
                path=str(self.weights_path),
                force_reload=False
            )
            
            # Configurer le device
            device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
            self.model.to(device)
            
            print(f"‚úÖ Mod√®le charg√© sur: {device}")
            print(f"  ‚öôÔ∏è  Device: {self.model.device}")
            print(f"  üìä Param√®tres: {sum(p.numel() for p in self.model.parameters()) / 1e6:.1f}M")
            
            # Charger les noms des classes
            if self.config_path.exists():
                with open(self.config_path, 'r') as f:
                    config = yaml.safe_load(f)
                    self.classes = config.get('names', ['dangereux', 'menagers', 'recyclables'])
            else:
                self.classes = ['dangereux', 'menagers', 'recyclables']
                
            print(f"  üè∑Ô∏è  Classes: {self.classes}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {e}")
            return False
    
    def test_inference(self, img_size=640, conf_threshold=0.6):
        """Tester l'inf√©rence sur une image al√©atoire
        
        Args:
            img_size: Taille de l'image (640 par d√©faut)
            conf_threshold: Seuil de confiance
        """
        print(f"\nüß™ Test d'inf√©rence (img_size={img_size}, conf={conf_threshold})...")
        
        # Cr√©er une image al√©atoire (simuler une image de cam√©ra)
        test_img = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        try:
            # Configurer le mod√®le
            self.model.conf = conf_threshold
            self.model.iou = 0.45
            
            # Mesurer le temps d'inf√©rence
            start_time = time.time()
            
            # Inf√©rence
            results = self.model(test_img, size=img_size)
            
            inference_time = (time.time() - start_time) * 1000  # En millisecondes
            
            # R√©cup√©rer les d√©tections
            detections = results.pandas().xyxy[0]
            
            print(f"‚úÖ Inf√©rence r√©ussie !")
            print(f"  ‚è±Ô∏è  Temps: {inference_time:.1f} ms")
            print(f"  üéØ D√©tections: {len(detections)}")
            
            if len(detections) > 0:
                print("\n  üìã D√©tails des d√©tections:")
                for idx, det in detections.iterrows():
                    class_name = self.classes[int(det['class'])]
                    confidence = det['confidence']
                    print(f"    {idx+1}. {class_name} ({confidence:.2%})")
            else:
                print("  ‚ÑπÔ∏è  Aucune d√©tection (normal pour image al√©atoire)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'inf√©rence: {e}")
            return False
    
    def test_camera(self, conf_threshold=0.6, num_frames=10):
        """Tester sur images de la cam√©ra (si disponible)
        
        Args:
            conf_threshold: Seuil de confiance
            num_frames: Nombre d'images √† tester
        """
        print(f"\nüì∑ Test avec cam√©ra ({num_frames} frames)...")
        
        try:
            cap = cv2.VideoCapture(0)
            
            if not cap.isOpened():
                print("‚ö†Ô∏è  Cam√©ra non disponible, test ignor√©")
                return False
            
            print("‚úÖ Cam√©ra ouverte")
            print("  üìä R√©solution:", int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), "x", int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
            
            self.model.conf = conf_threshold
            
            inference_times = []
            
            for i in range(num_frames):
                ret, frame = cap.read()
                if not ret:
                    print(f"‚ö†Ô∏è  √âchec lecture frame {i+1}")
                    continue
                
                start_time = time.time()
                results = self.model(frame)
                inference_time = (time.time() - start_time) * 1000
                
                inference_times.append(inference_time)
                
                detections = results.pandas().xyxy[0]
                print(f"  Frame {i+1}/{num_frames}: {inference_time:.1f}ms, {len(detections)} d√©tections")
            
            cap.release()
            
            if inference_times:
                avg_time = np.mean(inference_times)
                print(f"\nüìä Statistiques:")
                print(f"  ‚è±Ô∏è  Temps moyen: {avg_time:.1f} ms")
                print(f"  üöÄ FPS moyen: {1000/avg_time:.1f}")
                print(f"  üìà Min/Max: {min(inference_times):.1f} / {max(inference_times):.1f} ms")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test cam√©ra: {e}")
            return False
    
    def test_batch(self, batch_size=4, img_size=640):
        """Tester l'inf√©rence par batch
        
        Args:
            batch_size: Taille du batch
            img_size: Taille des images
        """
        print(f"\nüì¶ Test inf√©rence par batch (batch_size={batch_size})...")
        
        # Cr√©er un batch d'images al√©atoires
        images = [np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8) for _ in range(batch_size)]
        
        try:
            start_time = time.time()
            results = self.model(images, size=img_size)
            batch_time = (time.time() - start_time) * 1000
            
            time_per_image = batch_time / batch_size
            
            print(f"‚úÖ Inf√©rence batch r√©ussie !")
            print(f"  ‚è±Ô∏è  Temps total: {batch_time:.1f} ms")
            print(f"  ‚ö° Temps/image: {time_per_image:.1f} ms")
            print(f"  üöÄ FPS: {1000/time_per_image:.1f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur inf√©rence batch: {e}")
            return False
    
    def run_all_tests(self):
        """Lancer tous les tests"""
        print("\n" + "="*60)
        print("üß™ TESTS DU MOD√àLE YOLOv5 - UCAOTECH DOFBOT TRC2025")
        print("="*60)
        
        # Test 1: Chargement
        if not self.load_model():
            print("\n‚ùå Tests interrompus (√©chec chargement mod√®le)")
            return False
        
        # Test 2: Inf√©rence simple
        time.sleep(1)
        if not self.test_inference():
            print("\n‚ö†Ô∏è  Test inf√©rence simple √©chou√©")
        
        # Test 3: Cam√©ra (si disponible)
        time.sleep(1)
        self.test_camera(num_frames=5)
        
        # Test 4: Batch
        time.sleep(1)
        if not self.test_batch(batch_size=4):
            print("\n‚ö†Ô∏è  Test batch √©chou√©")
        
        print("\n" + "="*60)
        print("‚úÖ TESTS TERMIN√âS")
        print("="*60)
        
        return True


def main():
    """Fonction principale"""
    
    # Chemins par d√©faut (relatifs au script)
    script_dir = Path(__file__).parent.parent
    weights_path = script_dir / "models" / "best.pt"
    config_path = script_dir / "models" / "dataset.yaml"
    
    # V√©rifier l'existence des fichiers
    if not weights_path.exists():
        print(f"‚ùå Mod√®le introuvable: {weights_path}")
        print("üìù Assurez-vous que best.pt est dans models/")
        return 1
    
    # Cr√©er le testeur
    tester = YOLOv5Tester(weights_path, config_path)
    
    # Lancer les tests
    success = tester.run_all_tests()
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
